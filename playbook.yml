---
- name: Install openvpn, setup openvpn service, init pki, issue and revoke certificates, configure routing, fetch certificates and config
  hosts: all
  vars_files: 
  - vars.yml
  vars: 
    remote: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
  tasks:

  - name: Install openvpn, easy-rsa and zip
    apt:
      pkg:
      - openvpn
      - easy-rsa
      - zip
      update_cache: yes 

  - name: Install iptables-persistent
    apt:
      pkg:
      - iptables-persistent
    when: route_all_traffic

  - name: Stat ca_path
    stat:
      path: "{{ ca_path }}"
    register: ca_dir

  - name: Stat pki/ca.crt
    stat:
      path: "{{ ca_path }}/pki/ca.crt"
    register: ca_cert

  - name: Make cadir
    command: make-cadir {{ ca_path }}
    when: not ca_dir.stat.exists

  - name: Init pki
    shell: 
      cmd: |
        export EASYRSA_REQ_CN="Easy-RSA CA"
        ./easyrsa init-pki
        ./easyrsa --batch build-ca nopass
        ./easyrsa build-server-full server nopass
        ./easyrsa gen-dh
        ./easyrsa gen-crl
        openvpn --genkey secret pki/ta.key
        cp pki/ca.crt pki/issued/server.crt pki/private/server.key pki/crl.pem pki/dh.pem pki/ta.key /etc/openvpn
      chdir: "{{ ca_path }}"
    when: not ca_cert.stat.exists

  - name: Append ip tables
    iptables: 
      table: nat
      chain: POSTROUTING
      out_interface: eth0
      source: "{{ vpn_ip }}/24"
      jump: MASQUERADE
    when: route_all_traffic

  - name: Persistent ip tables
    shell: iptables-save > /etc/iptables/rules.v4
    when: route_all_traffic

  - name: Enable IPv4 forwarding
    sysctl:
      name: net.ipv4.ip_forward
      value: '1'
      state: present
      reload: True
    when: route_all_traffic

  - name: Write server conf
    template:
      src: server.j2
      dest: /etc/openvpn/server.conf
  
  - name: Write client conf
    template:
      src: client.j2
      dest: "{{ ca_path }}/{{ item }}.conf"
    loop: "{{ issued }}"

  - name: Issue client cert
    shell:
      cmd: |
        if [ ! -f "{{ ca_path }}/pki/issued/{{ item }}.crt" ]; then
          ./easyrsa build-client-full {{ item }} nopass
        fi
        cp {{ item }}.conf {{ item }}.ovpn
        mkdir {{ item }}
        cp pki/ca.crt pki/private/{{ item }}.key pki/issued/{{ item }}.crt {{ item }}.conf {{ item }}.ovpn pki/ta.key {{ item }}
        zip -r {{ item }}.zip {{ item }}

        echo "client\n\ndev tun\n\nremote {{ remote }}\n\n<ca>\n" > {{ item }}.ovpn
        cat pki/ca.crt >> {{ item }}.ovpn
        echo "\n</ca>\n\n<cert>\n" >> {{ item }}.ovpn
        cat pki/issued/{{ item }}.crt >> {{ item }}.ovpn
        echo "\n</cert>\n\n<key>\n" >> {{ item }}.ovpn
        cat pki/private/{{ item }}.key >> {{ item }}.ovpn
        echo "\n</key>\n\n<tls-auth>\n" >> {{ item }}.ovpn
        cat pki/ta.key >> {{ item }}.ovpn
        echo "\n</tls-auth>\nkey-direction 1" >> {{ item }}.ovpn

      chdir: "{{ ca_path }}"
    ignore_errors: true
    loop: "{{ issued }}"
    
  - name: Revoke client cert
    shell:
      cmd: |
        ./easyrsa revoke {{ item }}
        cp pki/crl.pem /etc/openvpn
      chdir: "{{ ca_path }}"
    loop: "{{ revoked }}"

  - name: Enable service
    systemd:
      name: openvpn@server
      state: restarted
      enabled: yes

  - name: Fetch zip files
    fetch:
      src: "{{ ca_path }}/{{ item }}.zip"
      dest: /tmp/{{ item }}.zip
      flat: yes
    ignore_errors: true
    loop: "{{ issued }}"

  - name: Fetch ovpn files
    fetch:
      src: "{{ ca_path }}/{{ item }}.ovpn"
      dest: /tmp/{{ item }}.ovpn
      flat: yes
    ignore_errors: true
    loop: "{{ issued }}"
    
  - name: Cleanup zip
    file:
      path: "{{ ca_path }}/{{ item }}.zip"
      state: absent
    loop: "{{ issued }}"
  
  - name: Cleanup ovpn
    file:
      path: "{{ ca_path }}/{{ item }}.ovpn"
      state: absent
    loop: "{{ issued }}"

  - name: Cleanup dir
    file:
      path: "{{ ca_path }}/{{ item }}"
      state: absent
    loop: "{{ issued }}"
